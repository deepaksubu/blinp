package com.plum.tinyos.model;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PlumSendMsg'
 * message type.
 */

public class PlumSendMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 100;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 53;

    /** Create a new PlumSendMsg of size 100. */
    public PlumSendMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PlumSendMsg of the given data_length. */
    public PlumSendMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg with the given data_length
     * and base offset.
     */
    public PlumSendMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg using the given byte array
     * as backing store.
     */
    public PlumSendMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PlumSendMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PlumSendMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg embedded in the given message
     * at the given base offset.
     */
    public PlumSendMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumSendMsg embedded in the given message
     * at the given base offset and length.
     */
    public PlumSendMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PlumSendMsg> \n";
      try {
        s += "  [sample.seqno=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_seqno(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.lTime=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_lTime(i) & 0xffffffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.unixTime=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_unixTime(i) & 0xffffffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.sender=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_sender(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.sampleRate=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_sampleRate(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.statusRate=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_statusRate(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.intvol=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_intvol(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sample.blockID=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_sample_blockID(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.seqno
    //   Field type: int[]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.seqno' is signed (false).
     */
    public static boolean isSigned_sample_seqno() {
        return false;
    }

    /**
     * Return whether the field 'sample.seqno' is an array (true).
     */
    public static boolean isArray_sample_seqno() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.seqno'
     */
    public static int offset_sample_seqno(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.seqno'
     */
    public static int offsetBits_sample_seqno(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.seqno' as a int[]
     */
    public int[] get_sample_seqno() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_seqno(0); index0++) {
            tmp[index0] = getElement_sample_seqno(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.seqno' from the given int[]
     */
    public void set_sample_seqno(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_seqno(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.seqno'
     */
    public int getElement_sample_seqno(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_seqno(index1), 16);
    }

    /**
     * Set an element of the array 'sample.seqno'
     */
    public void setElement_sample_seqno(int index1, int value) {
        setUIntBEElement(offsetBits_sample_seqno(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.seqno'
     */
    public static int totalSize_sample_seqno() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.seqno'
     */
    public static int totalSizeBits_sample_seqno() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.seqno'
     */
    public static int elementSize_sample_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.seqno'
     */
    public static int elementSizeBits_sample_seqno() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.seqno'
     */
    public static int numDimensions_sample_seqno() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.seqno'
     */
    public static int numElements_sample_seqno() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.seqno'
     * for the given dimension.
     */
    public static int numElements_sample_seqno(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.lTime
    //   Field type: long[]
    //   Offset (bits): 16
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.lTime' is signed (false).
     */
    public static boolean isSigned_sample_lTime() {
        return false;
    }

    /**
     * Return whether the field 'sample.lTime' is an array (true).
     */
    public static boolean isArray_sample_lTime() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.lTime'
     */
    public static int offset_sample_lTime(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.lTime'
     */
    public static int offsetBits_sample_lTime(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.lTime' as a long[]
     */
    public long[] get_sample_lTime() {
        long[] tmp = new long[5];
        for (int index0 = 0; index0 < numElements_sample_lTime(0); index0++) {
            tmp[index0] = getElement_sample_lTime(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.lTime' from the given long[]
     */
    public void set_sample_lTime(long[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_lTime(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a long) of the array 'sample.lTime'
     */
    public long getElement_sample_lTime(int index1) {
        return (long)getUIntBEElement(offsetBits_sample_lTime(index1), 32);
    }

    /**
     * Set an element of the array 'sample.lTime'
     */
    public void setElement_sample_lTime(int index1, long value) {
        setUIntBEElement(offsetBits_sample_lTime(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.lTime'
     */
    public static int totalSize_sample_lTime() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.lTime'
     */
    public static int totalSizeBits_sample_lTime() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.lTime'
     */
    public static int elementSize_sample_lTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.lTime'
     */
    public static int elementSizeBits_sample_lTime() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'sample.lTime'
     */
    public static int numDimensions_sample_lTime() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.lTime'
     */
    public static int numElements_sample_lTime() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.lTime'
     * for the given dimension.
     */
    public static int numElements_sample_lTime(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.unixTime
    //   Field type: long[]
    //   Offset (bits): 48
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.unixTime' is signed (false).
     */
    public static boolean isSigned_sample_unixTime() {
        return false;
    }

    /**
     * Return whether the field 'sample.unixTime' is an array (true).
     */
    public static boolean isArray_sample_unixTime() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.unixTime'
     */
    public static int offset_sample_unixTime(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.unixTime'
     */
    public static int offsetBits_sample_unixTime(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.unixTime' as a long[]
     */
    public long[] get_sample_unixTime() {
        long[] tmp = new long[5];
        for (int index0 = 0; index0 < numElements_sample_unixTime(0); index0++) {
            tmp[index0] = getElement_sample_unixTime(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.unixTime' from the given long[]
     */
    public void set_sample_unixTime(long[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_unixTime(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a long) of the array 'sample.unixTime'
     */
    public long getElement_sample_unixTime(int index1) {
        return (long)getUIntBEElement(offsetBits_sample_unixTime(index1), 32);
    }

    /**
     * Set an element of the array 'sample.unixTime'
     */
    public void setElement_sample_unixTime(int index1, long value) {
        setUIntBEElement(offsetBits_sample_unixTime(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.unixTime'
     */
    public static int totalSize_sample_unixTime() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.unixTime'
     */
    public static int totalSizeBits_sample_unixTime() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.unixTime'
     */
    public static int elementSize_sample_unixTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.unixTime'
     */
    public static int elementSizeBits_sample_unixTime() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'sample.unixTime'
     */
    public static int numDimensions_sample_unixTime() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.unixTime'
     */
    public static int numElements_sample_unixTime() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.unixTime'
     * for the given dimension.
     */
    public static int numElements_sample_unixTime(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.sender
    //   Field type: int[]
    //   Offset (bits): 80
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.sender' is signed (false).
     */
    public static boolean isSigned_sample_sender() {
        return false;
    }

    /**
     * Return whether the field 'sample.sender' is an array (true).
     */
    public static boolean isArray_sample_sender() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.sender'
     */
    public static int offset_sample_sender(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.sender'
     */
    public static int offsetBits_sample_sender(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.sender' as a int[]
     */
    public int[] get_sample_sender() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_sender(0); index0++) {
            tmp[index0] = getElement_sample_sender(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.sender' from the given int[]
     */
    public void set_sample_sender(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_sender(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.sender'
     */
    public int getElement_sample_sender(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_sender(index1), 16);
    }

    /**
     * Set an element of the array 'sample.sender'
     */
    public void setElement_sample_sender(int index1, int value) {
        setUIntBEElement(offsetBits_sample_sender(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.sender'
     */
    public static int totalSize_sample_sender() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.sender'
     */
    public static int totalSizeBits_sample_sender() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.sender'
     */
    public static int elementSize_sample_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.sender'
     */
    public static int elementSizeBits_sample_sender() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.sender'
     */
    public static int numDimensions_sample_sender() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.sender'
     */
    public static int numElements_sample_sender() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.sender'
     * for the given dimension.
     */
    public static int numElements_sample_sender(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.sampleRate
    //   Field type: int[]
    //   Offset (bits): 96
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.sampleRate' is signed (false).
     */
    public static boolean isSigned_sample_sampleRate() {
        return false;
    }

    /**
     * Return whether the field 'sample.sampleRate' is an array (true).
     */
    public static boolean isArray_sample_sampleRate() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.sampleRate'
     */
    public static int offset_sample_sampleRate(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.sampleRate'
     */
    public static int offsetBits_sample_sampleRate(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.sampleRate' as a int[]
     */
    public int[] get_sample_sampleRate() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_sampleRate(0); index0++) {
            tmp[index0] = getElement_sample_sampleRate(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.sampleRate' from the given int[]
     */
    public void set_sample_sampleRate(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_sampleRate(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.sampleRate'
     */
    public int getElement_sample_sampleRate(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_sampleRate(index1), 16);
    }

    /**
     * Set an element of the array 'sample.sampleRate'
     */
    public void setElement_sample_sampleRate(int index1, int value) {
        setUIntBEElement(offsetBits_sample_sampleRate(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.sampleRate'
     */
    public static int totalSize_sample_sampleRate() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.sampleRate'
     */
    public static int totalSizeBits_sample_sampleRate() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.sampleRate'
     */
    public static int elementSize_sample_sampleRate() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.sampleRate'
     */
    public static int elementSizeBits_sample_sampleRate() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.sampleRate'
     */
    public static int numDimensions_sample_sampleRate() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.sampleRate'
     */
    public static int numElements_sample_sampleRate() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.sampleRate'
     * for the given dimension.
     */
    public static int numElements_sample_sampleRate(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.statusRate
    //   Field type: int[]
    //   Offset (bits): 112
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.statusRate' is signed (false).
     */
    public static boolean isSigned_sample_statusRate() {
        return false;
    }

    /**
     * Return whether the field 'sample.statusRate' is an array (true).
     */
    public static boolean isArray_sample_statusRate() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.statusRate'
     */
    public static int offset_sample_statusRate(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.statusRate'
     */
    public static int offsetBits_sample_statusRate(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.statusRate' as a int[]
     */
    public int[] get_sample_statusRate() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_statusRate(0); index0++) {
            tmp[index0] = getElement_sample_statusRate(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.statusRate' from the given int[]
     */
    public void set_sample_statusRate(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_statusRate(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.statusRate'
     */
    public int getElement_sample_statusRate(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_statusRate(index1), 16);
    }

    /**
     * Set an element of the array 'sample.statusRate'
     */
    public void setElement_sample_statusRate(int index1, int value) {
        setUIntBEElement(offsetBits_sample_statusRate(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.statusRate'
     */
    public static int totalSize_sample_statusRate() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.statusRate'
     */
    public static int totalSizeBits_sample_statusRate() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.statusRate'
     */
    public static int elementSize_sample_statusRate() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.statusRate'
     */
    public static int elementSizeBits_sample_statusRate() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.statusRate'
     */
    public static int numDimensions_sample_statusRate() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.statusRate'
     */
    public static int numElements_sample_statusRate() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.statusRate'
     * for the given dimension.
     */
    public static int numElements_sample_statusRate(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.intvol
    //   Field type: int[]
    //   Offset (bits): 128
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.intvol' is signed (false).
     */
    public static boolean isSigned_sample_intvol() {
        return false;
    }

    /**
     * Return whether the field 'sample.intvol' is an array (true).
     */
    public static boolean isArray_sample_intvol() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.intvol'
     */
    public static int offset_sample_intvol(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.intvol'
     */
    public static int offsetBits_sample_intvol(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.intvol' as a int[]
     */
    public int[] get_sample_intvol() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_intvol(0); index0++) {
            tmp[index0] = getElement_sample_intvol(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.intvol' from the given int[]
     */
    public void set_sample_intvol(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_intvol(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.intvol'
     */
    public int getElement_sample_intvol(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_intvol(index1), 16);
    }

    /**
     * Set an element of the array 'sample.intvol'
     */
    public void setElement_sample_intvol(int index1, int value) {
        setUIntBEElement(offsetBits_sample_intvol(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.intvol'
     */
    public static int totalSize_sample_intvol() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.intvol'
     */
    public static int totalSizeBits_sample_intvol() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.intvol'
     */
    public static int elementSize_sample_intvol() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.intvol'
     */
    public static int elementSizeBits_sample_intvol() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.intvol'
     */
    public static int numDimensions_sample_intvol() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.intvol'
     */
    public static int numElements_sample_intvol() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.intvol'
     * for the given dimension.
     */
    public static int numElements_sample_intvol(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sample.blockID
    //   Field type: int[]
    //   Offset (bits): 144
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sample.blockID' is signed (false).
     */
    public static boolean isSigned_sample_blockID() {
        return false;
    }

    /**
     * Return whether the field 'sample.blockID' is an array (true).
     */
    public static boolean isArray_sample_blockID() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'sample.blockID'
     */
    public static int offset_sample_blockID(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sample.blockID'
     */
    public static int offsetBits_sample_blockID(int index1) {
        int offset = 144;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 160;
        return offset;
    }

    /**
     * Return the entire array 'sample.blockID' as a int[]
     */
    public int[] get_sample_blockID() {
        int[] tmp = new int[5];
        for (int index0 = 0; index0 < numElements_sample_blockID(0); index0++) {
            tmp[index0] = getElement_sample_blockID(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'sample.blockID' from the given int[]
     */
    public void set_sample_blockID(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_sample_blockID(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'sample.blockID'
     */
    public int getElement_sample_blockID(int index1) {
        return (int)getUIntBEElement(offsetBits_sample_blockID(index1), 16);
    }

    /**
     * Set an element of the array 'sample.blockID'
     */
    public void setElement_sample_blockID(int index1, int value) {
        setUIntBEElement(offsetBits_sample_blockID(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'sample.blockID'
     */
    public static int totalSize_sample_blockID() {
        return (800 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'sample.blockID'
     */
    public static int totalSizeBits_sample_blockID() {
        return 800;
    }

    /**
     * Return the size, in bytes, of each element of the array 'sample.blockID'
     */
    public static int elementSize_sample_blockID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'sample.blockID'
     */
    public static int elementSizeBits_sample_blockID() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'sample.blockID'
     */
    public static int numDimensions_sample_blockID() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'sample.blockID'
     */
    public static int numElements_sample_blockID() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'sample.blockID'
     * for the given dimension.
     */
    public static int numElements_sample_blockID(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
