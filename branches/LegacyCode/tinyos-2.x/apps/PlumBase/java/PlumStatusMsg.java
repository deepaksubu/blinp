/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'PlumStatusMsg'
 * message type.
 */

public class PlumStatusMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 52;

    /** Create a new PlumStatusMsg of size 18. */
    public PlumStatusMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new PlumStatusMsg of the given data_length. */
    public PlumStatusMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg with the given data_length
     * and base offset.
     */
    public PlumStatusMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg using the given byte array
     * as backing store.
     */
    public PlumStatusMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public PlumStatusMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public PlumStatusMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg embedded in the given message
     * at the given base offset.
     */
    public PlumStatusMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new PlumStatusMsg embedded in the given message
     * at the given base offset and length.
     */
    public PlumStatusMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <PlumStatusMsg> \n";
      try {
        s += "  [sender=0x"+Long.toHexString(get_sender())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [last_seqno=0x"+Long.toHexString(get_last_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [last_unixTime=0x"+Long.toHexString(get_last_unixTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sampleRate=0x"+Long.toHexString(get_sampleRate())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [statusRate=0x"+Long.toHexString(get_statusRate())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [intvol=0x"+Long.toHexString(get_intvol())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [first_blockID=0x"+Long.toHexString(get_first_blockID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [last_blockID=0x"+Long.toHexString(get_last_blockID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sender
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sender' is signed (false).
     */
    public static boolean isSigned_sender() {
        return false;
    }

    /**
     * Return whether the field 'sender' is an array (false).
     */
    public static boolean isArray_sender() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sender'
     */
    public static int offset_sender() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sender'
     */
    public static int offsetBits_sender() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'sender'
     */
    public int get_sender() {
        return (int)getUIntBEElement(offsetBits_sender(), 16);
    }

    /**
     * Set the value of the field 'sender'
     */
    public void set_sender(int value) {
        setUIntBEElement(offsetBits_sender(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sender'
     */
    public static int size_sender() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sender'
     */
    public static int sizeBits_sender() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: last_seqno
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'last_seqno' is signed (false).
     */
    public static boolean isSigned_last_seqno() {
        return false;
    }

    /**
     * Return whether the field 'last_seqno' is an array (false).
     */
    public static boolean isArray_last_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'last_seqno'
     */
    public static int offset_last_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'last_seqno'
     */
    public static int offsetBits_last_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'last_seqno'
     */
    public int get_last_seqno() {
        return (int)getUIntBEElement(offsetBits_last_seqno(), 16);
    }

    /**
     * Set the value of the field 'last_seqno'
     */
    public void set_last_seqno(int value) {
        setUIntBEElement(offsetBits_last_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'last_seqno'
     */
    public static int size_last_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'last_seqno'
     */
    public static int sizeBits_last_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: last_unixTime
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'last_unixTime' is signed (false).
     */
    public static boolean isSigned_last_unixTime() {
        return false;
    }

    /**
     * Return whether the field 'last_unixTime' is an array (false).
     */
    public static boolean isArray_last_unixTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'last_unixTime'
     */
    public static int offset_last_unixTime() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'last_unixTime'
     */
    public static int offsetBits_last_unixTime() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'last_unixTime'
     */
    public long get_last_unixTime() {
        return (long)getUIntBEElement(offsetBits_last_unixTime(), 32);
    }

    /**
     * Set the value of the field 'last_unixTime'
     */
    public void set_last_unixTime(long value) {
        setUIntBEElement(offsetBits_last_unixTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'last_unixTime'
     */
    public static int size_last_unixTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'last_unixTime'
     */
    public static int sizeBits_last_unixTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sampleRate
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sampleRate' is signed (false).
     */
    public static boolean isSigned_sampleRate() {
        return false;
    }

    /**
     * Return whether the field 'sampleRate' is an array (false).
     */
    public static boolean isArray_sampleRate() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sampleRate'
     */
    public static int offset_sampleRate() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sampleRate'
     */
    public static int offsetBits_sampleRate() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'sampleRate'
     */
    public int get_sampleRate() {
        return (int)getUIntBEElement(offsetBits_sampleRate(), 16);
    }

    /**
     * Set the value of the field 'sampleRate'
     */
    public void set_sampleRate(int value) {
        setUIntBEElement(offsetBits_sampleRate(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sampleRate'
     */
    public static int size_sampleRate() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sampleRate'
     */
    public static int sizeBits_sampleRate() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: statusRate
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'statusRate' is signed (false).
     */
    public static boolean isSigned_statusRate() {
        return false;
    }

    /**
     * Return whether the field 'statusRate' is an array (false).
     */
    public static boolean isArray_statusRate() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'statusRate'
     */
    public static int offset_statusRate() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'statusRate'
     */
    public static int offsetBits_statusRate() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'statusRate'
     */
    public int get_statusRate() {
        return (int)getUIntBEElement(offsetBits_statusRate(), 16);
    }

    /**
     * Set the value of the field 'statusRate'
     */
    public void set_statusRate(int value) {
        setUIntBEElement(offsetBits_statusRate(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'statusRate'
     */
    public static int size_statusRate() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'statusRate'
     */
    public static int sizeBits_statusRate() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: intvol
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'intvol' is signed (false).
     */
    public static boolean isSigned_intvol() {
        return false;
    }

    /**
     * Return whether the field 'intvol' is an array (false).
     */
    public static boolean isArray_intvol() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'intvol'
     */
    public static int offset_intvol() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'intvol'
     */
    public static int offsetBits_intvol() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'intvol'
     */
    public int get_intvol() {
        return (int)getUIntBEElement(offsetBits_intvol(), 16);
    }

    /**
     * Set the value of the field 'intvol'
     */
    public void set_intvol(int value) {
        setUIntBEElement(offsetBits_intvol(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'intvol'
     */
    public static int size_intvol() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'intvol'
     */
    public static int sizeBits_intvol() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: first_blockID
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'first_blockID' is signed (false).
     */
    public static boolean isSigned_first_blockID() {
        return false;
    }

    /**
     * Return whether the field 'first_blockID' is an array (false).
     */
    public static boolean isArray_first_blockID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'first_blockID'
     */
    public static int offset_first_blockID() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'first_blockID'
     */
    public static int offsetBits_first_blockID() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'first_blockID'
     */
    public int get_first_blockID() {
        return (int)getUIntBEElement(offsetBits_first_blockID(), 16);
    }

    /**
     * Set the value of the field 'first_blockID'
     */
    public void set_first_blockID(int value) {
        setUIntBEElement(offsetBits_first_blockID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'first_blockID'
     */
    public static int size_first_blockID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'first_blockID'
     */
    public static int sizeBits_first_blockID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: last_blockID
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'last_blockID' is signed (false).
     */
    public static boolean isSigned_last_blockID() {
        return false;
    }

    /**
     * Return whether the field 'last_blockID' is an array (false).
     */
    public static boolean isArray_last_blockID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'last_blockID'
     */
    public static int offset_last_blockID() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'last_blockID'
     */
    public static int offsetBits_last_blockID() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'last_blockID'
     */
    public int get_last_blockID() {
        return (int)getUIntBEElement(offsetBits_last_blockID(), 16);
    }

    /**
     * Set the value of the field 'last_blockID'
     */
    public void set_last_blockID(int value) {
        setUIntBEElement(offsetBits_last_blockID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'last_blockID'
     */
    public static int size_last_blockID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'last_blockID'
     */
    public static int sizeBits_last_blockID() {
        return 16;
    }

}
