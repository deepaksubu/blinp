#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'NWProgReply'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 6

# The Active Message type associated with this message.
AM_TYPE = -1

class NWProgReply(tinyos.message.Message.Message):
    # Create a new NWProgReply of size 6.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=6):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <NWProgReply> \n"
        try:
            s += "  [error=0x%x]\n" % (self.get_error())
        except:
            pass
        try:
            s += "  [pad=0x%x]\n" % (self.get_pad())
        except:
            pass
        try:
            s += "  [req.cmd=0x%x]\n" % (self.get_req_cmd())
        except:
            pass
        try:
            s += "  [req.imgno=0x%x]\n" % (self.get_req_imgno())
        except:
            pass
        try:
            s += "  [req.cmd_data.offset=0x%x]\n" % (self.get_req_cmd_data_offset())
        except:
            pass
        try:
            s += "  [req.cmd_data.when=0x%x]\n" % (self.get_req_cmd_data_when())
        except:
            pass
        try:
            s += "  [req.cmd_data.nimages=0x%x]\n" % (self.get_req_cmd_data_nimages())
        except:
            pass
        try:
            pass
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: error
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'error' is signed (False).
    #
    def isSigned_error(self):
        return False
    
    #
    # Return whether the field 'error' is an array (False).
    #
    def isArray_error(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'error'
    #
    def offset_error(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'error'
    #
    def offsetBits_error(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'error'
    #
    def get_error(self):
        return self.getUIntElement(self.offsetBits_error(), 8, 1)
    
    #
    # Set the value of the field 'error'
    #
    def set_error(self, value):
        self.setUIntElement(self.offsetBits_error(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'error'
    #
    def size_error(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'error'
    #
    def sizeBits_error(self):
        return 8
    
    #
    # Accessor methods for field: pad
    #   Field type: short
    #   Offset (bits): 8
    #   Size (bits): 8
    #

    #
    # Return whether the field 'pad' is signed (False).
    #
    def isSigned_pad(self):
        return False
    
    #
    # Return whether the field 'pad' is an array (False).
    #
    def isArray_pad(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'pad'
    #
    def offset_pad(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'pad'
    #
    def offsetBits_pad(self):
        return 8
    
    #
    # Return the value (as a short) of the field 'pad'
    #
    def get_pad(self):
        return self.getUIntElement(self.offsetBits_pad(), 8, 1)
    
    #
    # Set the value of the field 'pad'
    #
    def set_pad(self, value):
        self.setUIntElement(self.offsetBits_pad(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'pad'
    #
    def size_pad(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'pad'
    #
    def sizeBits_pad(self):
        return 8
    
    #
    # Accessor methods for field: req.cmd
    #   Field type: short
    #   Offset (bits): 16
    #   Size (bits): 8
    #

    #
    # Return whether the field 'req.cmd' is signed (False).
    #
    def isSigned_req_cmd(self):
        return False
    
    #
    # Return whether the field 'req.cmd' is an array (False).
    #
    def isArray_req_cmd(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'req.cmd'
    #
    def offset_req_cmd(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'req.cmd'
    #
    def offsetBits_req_cmd(self):
        return 16
    
    #
    # Return the value (as a short) of the field 'req.cmd'
    #
    def get_req_cmd(self):
        return self.getUIntElement(self.offsetBits_req_cmd(), 8, 1)
    
    #
    # Set the value of the field 'req.cmd'
    #
    def set_req_cmd(self, value):
        self.setUIntElement(self.offsetBits_req_cmd(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'req.cmd'
    #
    def size_req_cmd(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'req.cmd'
    #
    def sizeBits_req_cmd(self):
        return 8
    
    #
    # Accessor methods for field: req.imgno
    #   Field type: short
    #   Offset (bits): 24
    #   Size (bits): 8
    #

    #
    # Return whether the field 'req.imgno' is signed (False).
    #
    def isSigned_req_imgno(self):
        return False
    
    #
    # Return whether the field 'req.imgno' is an array (False).
    #
    def isArray_req_imgno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'req.imgno'
    #
    def offset_req_imgno(self):
        return (24 / 8)
    
    #
    # Return the offset (in bits) of the field 'req.imgno'
    #
    def offsetBits_req_imgno(self):
        return 24
    
    #
    # Return the value (as a short) of the field 'req.imgno'
    #
    def get_req_imgno(self):
        return self.getUIntElement(self.offsetBits_req_imgno(), 8, 1)
    
    #
    # Set the value of the field 'req.imgno'
    #
    def set_req_imgno(self, value):
        self.setUIntElement(self.offsetBits_req_imgno(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'req.imgno'
    #
    def size_req_imgno(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'req.imgno'
    #
    def sizeBits_req_imgno(self):
        return 8
    
    #
    # Accessor methods for field: req.cmd_data.offset
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'req.cmd_data.offset' is signed (False).
    #
    def isSigned_req_cmd_data_offset(self):
        return False
    
    #
    # Return whether the field 'req.cmd_data.offset' is an array (False).
    #
    def isArray_req_cmd_data_offset(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'req.cmd_data.offset'
    #
    def offset_req_cmd_data_offset(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'req.cmd_data.offset'
    #
    def offsetBits_req_cmd_data_offset(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'req.cmd_data.offset'
    #
    def get_req_cmd_data_offset(self):
        return self.getUIntElement(self.offsetBits_req_cmd_data_offset(), 16, 1)
    
    #
    # Set the value of the field 'req.cmd_data.offset'
    #
    def set_req_cmd_data_offset(self, value):
        self.setUIntElement(self.offsetBits_req_cmd_data_offset(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'req.cmd_data.offset'
    #
    def size_req_cmd_data_offset(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'req.cmd_data.offset'
    #
    def sizeBits_req_cmd_data_offset(self):
        return 16
    
    #
    # Accessor methods for field: req.cmd_data.when
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'req.cmd_data.when' is signed (False).
    #
    def isSigned_req_cmd_data_when(self):
        return False
    
    #
    # Return whether the field 'req.cmd_data.when' is an array (False).
    #
    def isArray_req_cmd_data_when(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'req.cmd_data.when'
    #
    def offset_req_cmd_data_when(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'req.cmd_data.when'
    #
    def offsetBits_req_cmd_data_when(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'req.cmd_data.when'
    #
    def get_req_cmd_data_when(self):
        return self.getUIntElement(self.offsetBits_req_cmd_data_when(), 16, 1)
    
    #
    # Set the value of the field 'req.cmd_data.when'
    #
    def set_req_cmd_data_when(self, value):
        self.setUIntElement(self.offsetBits_req_cmd_data_when(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'req.cmd_data.when'
    #
    def size_req_cmd_data_when(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'req.cmd_data.when'
    #
    def sizeBits_req_cmd_data_when(self):
        return 16
    
    #
    # Accessor methods for field: req.cmd_data.nimages
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'req.cmd_data.nimages' is signed (False).
    #
    def isSigned_req_cmd_data_nimages(self):
        return False
    
    #
    # Return whether the field 'req.cmd_data.nimages' is an array (False).
    #
    def isArray_req_cmd_data_nimages(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'req.cmd_data.nimages'
    #
    def offset_req_cmd_data_nimages(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'req.cmd_data.nimages'
    #
    def offsetBits_req_cmd_data_nimages(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'req.cmd_data.nimages'
    #
    def get_req_cmd_data_nimages(self):
        return self.getUIntElement(self.offsetBits_req_cmd_data_nimages(), 16, 1)
    
    #
    # Set the value of the field 'req.cmd_data.nimages'
    #
    def set_req_cmd_data_nimages(self, value):
        self.setUIntElement(self.offsetBits_req_cmd_data_nimages(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'req.cmd_data.nimages'
    #
    def size_req_cmd_data_nimages(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'req.cmd_data.nimages'
    #
    def sizeBits_req_cmd_data_nimages(self):
        return 16
    
    #
    # Accessor methods for field: req.data
    #   Field type: short[]
    #   Offset (bits): 48
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'req.data' is signed (False).
    #
    def isSigned_req_data(self):
        return False
    
    #
    # Return whether the field 'req.data' is an array (True).
    #
    def isArray_req_data(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'req.data'
    #
    def offset_req_data(self, index1):
        offset = 48
        if index1 < 0:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'req.data'
    #
    def offsetBits_req_data(self, index1):
        offset = 48
        if index1 < 0:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'req.data' as a short[]
    #
    def get_req_data(self):
        raise IndexError
    
    #
    # Set the contents of the array 'req.data' from the given short[]
    #
    def set_req_data(self, value):
        for index0 in range(0, len(value)):
            self.setElement_req_data(index0, value[index0])

    #
    # Return an element (as a short) of the array 'req.data'
    #
    def getElement_req_data(self, index1):
        return self.getUIntElement(self.offsetBits_req_data(index1), 8, 1)
    
    #
    # Set an element of the array 'req.data'
    #
    def setElement_req_data(self, index1, value):
        self.setUIntElement(self.offsetBits_req_data(index1), 8, value, 1)
    
    #
    # Return the size, in bytes, of each element of the array 'req.data'
    #
    def elementSize_req_data(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'req.data'
    #
    def elementSizeBits_req_data(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'req.data'
    #
    def numDimensions_req_data(self):
        return 1
    
    #
    # Return the number of elements in the array 'req.data'
    # for the given dimension.
    #
    def numElements_req_data(self, dimension):
        array_dims = [ 0,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'req.data' with a String
    #
    def setString_req_data(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_req_data(i, ord(s[i]));
         self.setElement_req_data(l, 0) #null terminate
    
    #
    # Read the array 'req.data' as a String
    #
    def getString_req_data(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_req_data(i) == chr(0):
                break
            carr += self.getElement_req_data(i)
        return carr
    
