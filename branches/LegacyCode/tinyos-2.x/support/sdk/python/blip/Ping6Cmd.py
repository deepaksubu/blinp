#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Ping6Cmd'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 20

# The Active Message type associated with this message.
AM_TYPE = -1

class Ping6Cmd(tinyos.message.Message.Message):
    # Create a new Ping6Cmd of size 20.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=20):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Ping6Cmd> \n"
        try:
            s += "  [cnt=0x%x]\n" % (self.get_cnt())
        except:
            pass
        try:
            s += "  [dt=0x%x]\n" % (self.get_dt())
        except:
            pass
        try:
            s += "  [addr=";
            for i in range(0, 16):
                s += "0x%x " % (self.getElement_addr(i) & 0xff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: cnt
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'cnt' is signed (False).
    #
    def isSigned_cnt(self):
        return False
    
    #
    # Return whether the field 'cnt' is an array (False).
    #
    def isArray_cnt(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'cnt'
    #
    def offset_cnt(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'cnt'
    #
    def offsetBits_cnt(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'cnt'
    #
    def get_cnt(self):
        return self.getUIntElement(self.offsetBits_cnt(), 16, 1)
    
    #
    # Set the value of the field 'cnt'
    #
    def set_cnt(self, value):
        self.setUIntElement(self.offsetBits_cnt(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'cnt'
    #
    def size_cnt(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'cnt'
    #
    def sizeBits_cnt(self):
        return 16
    
    #
    # Accessor methods for field: dt
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'dt' is signed (False).
    #
    def isSigned_dt(self):
        return False
    
    #
    # Return whether the field 'dt' is an array (False).
    #
    def isArray_dt(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'dt'
    #
    def offset_dt(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'dt'
    #
    def offsetBits_dt(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'dt'
    #
    def get_dt(self):
        return self.getUIntElement(self.offsetBits_dt(), 16, 1)
    
    #
    # Set the value of the field 'dt'
    #
    def set_dt(self, value):
        self.setUIntElement(self.offsetBits_dt(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'dt'
    #
    def size_dt(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'dt'
    #
    def sizeBits_dt(self):
        return 16
    
    #
    # Accessor methods for field: addr
    #   Field type: short[]
    #   Offset (bits): 32
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'addr' is signed (False).
    #
    def isSigned_addr(self):
        return False
    
    #
    # Return whether the field 'addr' is an array (True).
    #
    def isArray_addr(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'addr'
    #
    def offset_addr(self, index1):
        offset = 32
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'addr'
    #
    def offsetBits_addr(self, index1):
        offset = 32
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'addr' as a short[]
    #
    def get_addr(self):
        tmp = [None]*16
        for index0 in range (0, self.numElements_addr(0)):
                tmp[index0] = self.getElement_addr(index0)
        return tmp
    
    #
    # Set the contents of the array 'addr' from the given short[]
    #
    def set_addr(self, value):
        for index0 in range(0, len(value)):
            self.setElement_addr(index0, value[index0])

    #
    # Return an element (as a short) of the array 'addr'
    #
    def getElement_addr(self, index1):
        return self.getUIntElement(self.offsetBits_addr(index1), 8, 1)
    
    #
    # Set an element of the array 'addr'
    #
    def setElement_addr(self, index1, value):
        self.setUIntElement(self.offsetBits_addr(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'addr'
    #
    def totalSize_addr(self):
        return (128 / 8)
    
    #
    # Return the total size, in bits, of the array 'addr'
    #
    def totalSizeBits_addr(self):
        return 128
    
    #
    # Return the size, in bytes, of each element of the array 'addr'
    #
    def elementSize_addr(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'addr'
    #
    def elementSizeBits_addr(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'addr'
    #
    def numDimensions_addr(self):
        return 1
    
    #
    # Return the number of elements in the array 'addr'
    #
    def numElements_addr():
        return 16
    
    #
    # Return the number of elements in the array 'addr'
    # for the given dimension.
    #
    def numElements_addr(self, dimension):
        array_dims = [ 16,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'addr' with a String
    #
    def setString_addr(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_addr(i, ord(s[i]));
         self.setElement_addr(l, 0) #null terminate
    
    #
    # Read the array 'addr' as a String
    #
    def getString_addr(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_addr(i) == chr(0):
                break
            carr += self.getElement_addr(i)
        return carr
    
